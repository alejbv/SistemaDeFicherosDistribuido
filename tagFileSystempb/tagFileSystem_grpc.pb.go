// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: tagFileSystempb/tagFileSystem.proto

package tagFileSystempb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TagFileSystemServiceClient is the client API for TagFileSystemService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TagFileSystemServiceClient interface {
	//
	//Copia uno o más ficheros hacia el sistema y estos son inscritos con
	//las etiquetas contenidas en tag-list
	AddFiles(ctx context.Context, opts ...grpc.CallOption) (TagFileSystemService_AddFilesClient, error)
	//
	//Elimina todos los ficheros que cumplan con la consulta tag-query
	DeleteFiles(ctx context.Context, in *DeleteFilesRequest, opts ...grpc.CallOption) (*DeleteFilesResponse, error)
	//
	//Lista el nombre y las etiquetas de todos los ficheros que cumplan con
	//la consulta tag-query
	ListFiles(ctx context.Context, in *ListFilesRequest, opts ...grpc.CallOption) (TagFileSystemService_ListFilesClient, error)
	AddTags(ctx context.Context, opts ...grpc.CallOption) (TagFileSystemService_AddTagsClient, error)
	//
	//Elimina las etiquetas contenidas en tag-list de todos los ficheros que
	//cumpan con la consulta tag-query.
	DeleteTags(ctx context.Context, in *DeleteTagsRequest, opts ...grpc.CallOption) (*DeleteTagsResponse, error)
}

type tagFileSystemServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTagFileSystemServiceClient(cc grpc.ClientConnInterface) TagFileSystemServiceClient {
	return &tagFileSystemServiceClient{cc}
}

func (c *tagFileSystemServiceClient) AddFiles(ctx context.Context, opts ...grpc.CallOption) (TagFileSystemService_AddFilesClient, error) {
	stream, err := c.cc.NewStream(ctx, &TagFileSystemService_ServiceDesc.Streams[0], "/tagFile.tagFileSystemService/AddFiles", opts...)
	if err != nil {
		return nil, err
	}
	x := &tagFileSystemServiceAddFilesClient{stream}
	return x, nil
}

type TagFileSystemService_AddFilesClient interface {
	Send(*AddFilesRequest) error
	CloseAndRecv() (*AddFilesResponse, error)
	grpc.ClientStream
}

type tagFileSystemServiceAddFilesClient struct {
	grpc.ClientStream
}

func (x *tagFileSystemServiceAddFilesClient) Send(m *AddFilesRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *tagFileSystemServiceAddFilesClient) CloseAndRecv() (*AddFilesResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(AddFilesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tagFileSystemServiceClient) DeleteFiles(ctx context.Context, in *DeleteFilesRequest, opts ...grpc.CallOption) (*DeleteFilesResponse, error) {
	out := new(DeleteFilesResponse)
	err := c.cc.Invoke(ctx, "/tagFile.tagFileSystemService/DeleteFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagFileSystemServiceClient) ListFiles(ctx context.Context, in *ListFilesRequest, opts ...grpc.CallOption) (TagFileSystemService_ListFilesClient, error) {
	stream, err := c.cc.NewStream(ctx, &TagFileSystemService_ServiceDesc.Streams[1], "/tagFile.tagFileSystemService/ListFiles", opts...)
	if err != nil {
		return nil, err
	}
	x := &tagFileSystemServiceListFilesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TagFileSystemService_ListFilesClient interface {
	Recv() (*ListFilesResponse, error)
	grpc.ClientStream
}

type tagFileSystemServiceListFilesClient struct {
	grpc.ClientStream
}

func (x *tagFileSystemServiceListFilesClient) Recv() (*ListFilesResponse, error) {
	m := new(ListFilesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tagFileSystemServiceClient) AddTags(ctx context.Context, opts ...grpc.CallOption) (TagFileSystemService_AddTagsClient, error) {
	stream, err := c.cc.NewStream(ctx, &TagFileSystemService_ServiceDesc.Streams[2], "/tagFile.tagFileSystemService/AddTags", opts...)
	if err != nil {
		return nil, err
	}
	x := &tagFileSystemServiceAddTagsClient{stream}
	return x, nil
}

type TagFileSystemService_AddTagsClient interface {
	Send(*AddTagsRequest) error
	CloseAndRecv() (*AddTagsResponse, error)
	grpc.ClientStream
}

type tagFileSystemServiceAddTagsClient struct {
	grpc.ClientStream
}

func (x *tagFileSystemServiceAddTagsClient) Send(m *AddTagsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *tagFileSystemServiceAddTagsClient) CloseAndRecv() (*AddTagsResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(AddTagsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tagFileSystemServiceClient) DeleteTags(ctx context.Context, in *DeleteTagsRequest, opts ...grpc.CallOption) (*DeleteTagsResponse, error) {
	out := new(DeleteTagsResponse)
	err := c.cc.Invoke(ctx, "/tagFile.tagFileSystemService/DeleteTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TagFileSystemServiceServer is the server API for TagFileSystemService service.
// All implementations must embed UnimplementedTagFileSystemServiceServer
// for forward compatibility
type TagFileSystemServiceServer interface {
	//
	//Copia uno o más ficheros hacia el sistema y estos son inscritos con
	//las etiquetas contenidas en tag-list
	AddFiles(TagFileSystemService_AddFilesServer) error
	//
	//Elimina todos los ficheros que cumplan con la consulta tag-query
	DeleteFiles(context.Context, *DeleteFilesRequest) (*DeleteFilesResponse, error)
	//
	//Lista el nombre y las etiquetas de todos los ficheros que cumplan con
	//la consulta tag-query
	ListFiles(*ListFilesRequest, TagFileSystemService_ListFilesServer) error
	AddTags(TagFileSystemService_AddTagsServer) error
	//
	//Elimina las etiquetas contenidas en tag-list de todos los ficheros que
	//cumpan con la consulta tag-query.
	DeleteTags(context.Context, *DeleteTagsRequest) (*DeleteTagsResponse, error)
	mustEmbedUnimplementedTagFileSystemServiceServer()
}

// UnimplementedTagFileSystemServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTagFileSystemServiceServer struct {
}

func (UnimplementedTagFileSystemServiceServer) AddFiles(TagFileSystemService_AddFilesServer) error {
	return status.Errorf(codes.Unimplemented, "method AddFiles not implemented")
}
func (UnimplementedTagFileSystemServiceServer) DeleteFiles(context.Context, *DeleteFilesRequest) (*DeleteFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFiles not implemented")
}
func (UnimplementedTagFileSystemServiceServer) ListFiles(*ListFilesRequest, TagFileSystemService_ListFilesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListFiles not implemented")
}
func (UnimplementedTagFileSystemServiceServer) AddTags(TagFileSystemService_AddTagsServer) error {
	return status.Errorf(codes.Unimplemented, "method AddTags not implemented")
}
func (UnimplementedTagFileSystemServiceServer) DeleteTags(context.Context, *DeleteTagsRequest) (*DeleteTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTags not implemented")
}
func (UnimplementedTagFileSystemServiceServer) mustEmbedUnimplementedTagFileSystemServiceServer() {}

// UnsafeTagFileSystemServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TagFileSystemServiceServer will
// result in compilation errors.
type UnsafeTagFileSystemServiceServer interface {
	mustEmbedUnimplementedTagFileSystemServiceServer()
}

func RegisterTagFileSystemServiceServer(s grpc.ServiceRegistrar, srv TagFileSystemServiceServer) {
	s.RegisterService(&TagFileSystemService_ServiceDesc, srv)
}

func _TagFileSystemService_AddFiles_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TagFileSystemServiceServer).AddFiles(&tagFileSystemServiceAddFilesServer{stream})
}

type TagFileSystemService_AddFilesServer interface {
	SendAndClose(*AddFilesResponse) error
	Recv() (*AddFilesRequest, error)
	grpc.ServerStream
}

type tagFileSystemServiceAddFilesServer struct {
	grpc.ServerStream
}

func (x *tagFileSystemServiceAddFilesServer) SendAndClose(m *AddFilesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *tagFileSystemServiceAddFilesServer) Recv() (*AddFilesRequest, error) {
	m := new(AddFilesRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TagFileSystemService_DeleteFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagFileSystemServiceServer).DeleteFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tagFile.tagFileSystemService/DeleteFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagFileSystemServiceServer).DeleteFiles(ctx, req.(*DeleteFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagFileSystemService_ListFiles_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListFilesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TagFileSystemServiceServer).ListFiles(m, &tagFileSystemServiceListFilesServer{stream})
}

type TagFileSystemService_ListFilesServer interface {
	Send(*ListFilesResponse) error
	grpc.ServerStream
}

type tagFileSystemServiceListFilesServer struct {
	grpc.ServerStream
}

func (x *tagFileSystemServiceListFilesServer) Send(m *ListFilesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TagFileSystemService_AddTags_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TagFileSystemServiceServer).AddTags(&tagFileSystemServiceAddTagsServer{stream})
}

type TagFileSystemService_AddTagsServer interface {
	SendAndClose(*AddTagsResponse) error
	Recv() (*AddTagsRequest, error)
	grpc.ServerStream
}

type tagFileSystemServiceAddTagsServer struct {
	grpc.ServerStream
}

func (x *tagFileSystemServiceAddTagsServer) SendAndClose(m *AddTagsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *tagFileSystemServiceAddTagsServer) Recv() (*AddTagsRequest, error) {
	m := new(AddTagsRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TagFileSystemService_DeleteTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagFileSystemServiceServer).DeleteTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tagFile.tagFileSystemService/DeleteTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagFileSystemServiceServer).DeleteTags(ctx, req.(*DeleteTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TagFileSystemService_ServiceDesc is the grpc.ServiceDesc for TagFileSystemService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TagFileSystemService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tagFile.tagFileSystemService",
	HandlerType: (*TagFileSystemServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteFiles",
			Handler:    _TagFileSystemService_DeleteFiles_Handler,
		},
		{
			MethodName: "DeleteTags",
			Handler:    _TagFileSystemService_DeleteTags_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AddFiles",
			Handler:       _TagFileSystemService_AddFiles_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ListFiles",
			Handler:       _TagFileSystemService_ListFiles_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AddTags",
			Handler:       _TagFileSystemService_AddTags_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "tagFileSystempb/tagFileSystem.proto",
}
