syntax = "proto3";

package chord;
option go_package="./server/chord/chord";

// Nodo que contiene una ID y una direccion IP.
message Node {
  bytes ID = 1;
  string IP = 2;
  string port = 3;
}

// Las Request vacias
message GetPredecessorRequest{}
message GetSuccessorRequest{}
message CheckRequest{}
message PartitionRequest{}
message ExtendResponse{}

// Las respuestas vacias
message SetPredecessorResponse{}
message SetSuccessorResponse{}
message NotifyResponse{}
message CheckResponse{}
message SetResponse{}
message DeleteResponse{}
message DiscardResponse{}


// Las request que pasan un nodo
message  SetPredecessorRequest{
  Node predecessor =1 ;
}

message SetSuccessorRequest{
 Node successor = 1;
}

message NotifyRequest{
 Node notify = 1;
}

//Las respuestas que devuelven un nodo
message GetPredecessorResponse{
  Node predecessor =1;
}

message GetSuccessorResponse{
  Node successor =1;
}
message FindSuccesorResponse{
  Node succesor = 1;
}


// Otras Request
message FindSuccesorRequest{
  bytes ID =1;
}
// GetRequest contains the key of a desired value.
message GetRequest {
  string Key = 1;
  bool Lock = 2;
  string IP = 3;
}

// SetRequest contains the <key, value> pair to set on storage.
message SetRequest {
  string Key = 1;
  bytes Value = 2;
  bool Replica = 3;
  bool Lock = 4;
  string IP = 5;
}

// DeleteRequest contains the key to eliminate.
message DeleteRequest {
  string Key = 1;
  bool Replica = 2;
  bool Lock = 3;
  string IP = 4;
}

// ExtendRequest contains the <key, value> pairs to set on the storage.
message ExtendRequest {
  map<string, bytes> dictionary = 1;
}

// DiscardRequest contains the lower and upper bound of the interval storage to delete.
message DiscardRequest {
  repeated string keys = 1;
}

// Otras Respuestas
// GetResponse contains the value of a requested key.
message GetResponse {
  bytes Value = 1;
}
// PartitionResponse contains the contains the <key, value> pairs to return.
message PartitionResponse {
  map<string, bytes> in = 1;
  map<string, bytes> out = 2;
}


// Chord service for inter-node communication.
service Chord {
  // GetPredecessor devuelve el nodo que se cree que es el predecesor.
  rpc GetPredecessor(GetPredecessorRequest) returns (GetPredecessorResponse);
  // GetSuccessor devuelve el nodo que se cree que es el sucesor.
  rpc GetSuccessor(GetSuccessorRequest) returns (GetSuccessorResponse);
  // SetPredecessor encuentra el predecesor para el nodo actual.
  rpc SetPredecessor(SetPredecessorRequest) returns (SetPredecessorResponse);
  // SetSuccessor  encuentra el sucesor para el nodo actual.
  rpc SetSuccessor(SetSuccessorRequest) returns (SetSuccessorResponse);
  // FindSuccessor encuentra el nodo que sucede a esta ID.
  rpc FindSuccessor(FindSuccesorRequest) returns (FindSuccesorResponse);
  // Notify notifica al nodo que puede tener un nuevo sucesor.
  rpc Notify(NotifyRequest) returns (NotifyResponse);
  // Check comprueba si el nodo esta vivo.
  rpc Check(CheckRequest) returns (CheckResponse);

  // Get recupera el valor asociado a la clave.
  rpc Get(GetRequest) returns (GetResponse);
  // Set almacena un par <clave, valor>.
  rpc Set(SetRequest) returns (SetResponse);
  // Delete elimina el par <clave, valor> especifico.
  rpc Delete(DeleteRequest) returns (DeleteResponse);
  // Partition devuelve todos los pares <clave, valor> en el almacenamiento dado  un internal.
  rpc Partition(PartitionRequest) returns (PartitionResponse);
  // Extend establece una lista de pares <clave, valor> en el diccionario de almacenamiento
  rpc Extend(ExtendRequest) returns (ExtendResponse);
  // Discard elimina todos los pares <clave, valor> en el almacenamiento.
  rpc Discard(DiscardRequest) returns (DiscardResponse);
}