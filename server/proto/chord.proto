syntax = "proto3";

package chord;
option go_package="./server/chord/chord";

// Objetos del Chord
// Nodo que contiene una ID y una direccion IP.
message Node {
  bytes ID = 1;
  string IP = 2;
  string port = 3;
}

// Objeto que representa el archivo que se esta mandando
message TagFile{
  string name = 1;
  string extension = 2;
  bytes  file =3;
  repeated string tags = 4;    
}


message TagEncoder{
  string FileName = 1;
  string FileExtension =2;
  bytes  NodeID =3;
  string NodeIP =4;
  string NodePort =5;
}

// Las Request vacias
message GetPredecessorRequest{}
message GetSuccessorRequest{}
message CheckRequest{}
message PartitionRequest{}
message ExtendResponse{}

// Las respuestas vacias
message SetPredecessorResponse{}
message SetSuccessorResponse{}
message NotifyResponse{}
message CheckResponse{}
message SetResponse{}
message DeleteResponse{}
message DiscardResponse{}


// Las request que pasan un nodo
message  SetPredecessorRequest{
  Node predecessor =1 ;
}

message SetSuccessorRequest{
 Node successor = 1;
}

message NotifyRequest{
 Node notify = 1;
}

//Las respuestas que devuelven un nodo
message GetPredecessorResponse{
  Node predecessor =1;
}

message GetSuccessorResponse{
  Node successor =1;
}
message FindSuccesorResponse{
  Node succesor = 1;
}


// Otras Request
message FindSuccesorRequest{
  bytes ID =1;

}
 
// ExtendRequest contains the <key, value> pairs to set on the storage.
message ExtendRequest {
  repeated TagFile    Files = 1;
  map<string, bytes>  Tags  = 2;
}

// DiscardRequest contains the lower and upper bound of the interval storage to delete.
message DiscardRequest {
  repeated string Tags = 1;
  repeated string Files =2;
}

// PartitionResponse contains the contains the <key, value> pairs to return.
message PartitionResponse {
  repeated TagFile    InFiles  = 1;
  repeated TagFile    OutFiles = 2;
  map<string, bytes>  InTags   = 3;
  map<string, bytes>  OutTags  = 4;
}

message EditFileFromTagRequest {
  string Tag = 1;
  TagEncoder Mod = 2;

}

message EditFileFromTagResponse{}

// Ficheros Mensajes

message AddFileRequest{
  TagFile file = 1;
  bool Replica = 2;
  bool Lock = 3;
  string IP = 4;
}

message AddFileResponse{
  Node  destine = 1;
}


message AddTagRequest{
  string Tag = 1;
  string FileName = 2;
  string ExtensioName = 3;
  Node   TargetNode = 4;
  bool   Replica = 5;
}
message AddTagResponse{}


message DeleteFileRequest{
    string FileName = 1;
    string FileExtension = 2;
    bool   Replica = 3;
}

message DeleteFileResponse{}

message DeleteFileFromTagRequest{
    string Tag = 1;
    string FileName = 2;
    string FileExtension = 3;
    bool Replica = 4;
}
message DeleteFileFromTagResponse{}

message DeleteTagRequest{
  string Tag = 1;
  bool Replica = 2;
}

message DeleteTagResponse{}

message GetTagRequest{
   string tag = 1;
}

message GetTagResponse{
  TagEncoder Encoder = 1;
}

message DeleteFileByQueryRequest{
  repeated string tag = 1;
}

message DeleteFileByQueryResponse{}
// Chord service for inter-node communication.

message ListByQueryRequest{
  repeated string Tags =1 ;
}

message ListByQueryResponse{
  map<string, bytes> Response = 1;
}
message GetFileInfoRequest{
  string FileName =1;
  string FileExtension = 2;

}

message GetFileInfoResponse{
    bytes Info = 1;
}

message DeleteTagsByQueryRequest{
  repeated string QueryTags = 1;
  repeated string RemoveTags = 2;
}
message DeleteTagsByQueryResponse{}

message AddTagsByQueryRequest{
  repeated string QueryTags = 1;
  repeated string AddTags = 2;
}

message AddTagsByQueryResponse{}

message AddTagsToFileRequest{
string    FileName =1;
string		FileExtension = 2;
repeated string	ListTags = 3;
bool			Replica =4;
}
message AddTagsToFileResponse{
  Node Destiny = 1;
}

message DeleteTagsFromFileRequest{
  string    FileName =1;
  string		FileExtension = 2;
  repeated string	ListTags = 3;
  bool			Replica =4;
  }
  message DeleteTagsFromFileResponse{
    Node Destiny = 1;
  }
  

service Chord {
  // GetPredecessor devuelve el nodo que se cree que es el predecesor.
  rpc GetPredecessor(GetPredecessorRequest) returns (GetPredecessorResponse);
  // GetSuccessor devuelve el nodo que se cree que es el sucesor.
  rpc GetSuccessor(GetSuccessorRequest) returns (GetSuccessorResponse);
  // SetPredecessor encuentra el predecesor para el nodo actual.
  rpc SetPredecessor(SetPredecessorRequest) returns (SetPredecessorResponse);
  // SetSuccessor  encuentra el sucesor para el nodo actual.
  rpc SetSuccessor(SetSuccessorRequest) returns (SetSuccessorResponse);
  // FindSuccessor encuentra el nodo que sucede a esta ID.
  rpc FindSuccessor(FindSuccesorRequest) returns (FindSuccesorResponse);
  // Notify notifica al nodo que puede tener un nuevo sucesor.
  rpc Notify(NotifyRequest) returns (NotifyResponse);
  // Check comprueba si el nodo esta vivo.
  rpc Check(CheckRequest) returns (CheckResponse);

  rpc Partition(PartitionRequest) returns (PartitionResponse);
  // Extend establece una lista de pares <clave, valor> en el diccionario de almacenamiento
  rpc Extend(ExtendRequest) returns (ExtendResponse);
  // Discard elimina todos los pares <clave, valor> en el almacenamiento.
  rpc Discard(DiscardRequest) returns (DiscardResponse);


/*
      Metodos Propios de la Aplicacion
===================================================================================
*/
   /*
    Manda un fichero hacia el sistema y estos son guardados con
    las etiquetas contenidas en tag-list
    */
  rpc AddFile(AddFileRequest) returns (AddFileResponse);

  /*
  Manda a eliminar todos los archivos que cumplen con una determinada query
  */
  rpc DeleteFileByQuery(DeleteFileByQueryRequest) returns (DeleteFileByQueryResponse);
  rpc ListByQuery(ListByQueryRequest) returns (ListByQueryResponse);
  rpc DeleteTagsByQuery(DeleteTagsByQueryRequest) returns (DeleteTagsByQueryResponse);
  rpc AddTagsByQuery(AddTagsByQueryRequest) returns (AddTagsByQueryResponse);

 

  
/*
      Metodos utilizados para comunicacion entre nodos de la aplicacion
=========================================================================================================
*/

/*
              Metodos de archivos
=========================================================================================================
*/

// Manda a agregar en las etiquetas de un archivo nuevas etiquetas
rpc AddTagsToFile(AddTagsToFileRequest) returns (AddTagsToFileResponse);
// Manda a eliminar de las etiquetas de un archivo un conjunto de etiquetas 
rpc DeleteTagsFromFile(DeleteTagsFromFileRequest) returns (DeleteTagsFromFileResponse);


//Manda a guardar una de las etiquetas de un archivo y la informacion relevante de dicho archivo
rpc AddTag(AddTagRequest) returns (AddTagResponse);

//Elimina de las referencias a archivos guardadas en las etiquetas la referencia a un archivo
rpc DeleteFileFromTag(DeleteFileFromTagRequest) returns (DeleteFileFromTagResponse);
  

//Manda a eliminar un archivo
rpc DeleteFile(DeleteFileRequest) returns (DeleteFileResponse);

// Recupera todas las referencias a archivos que guarda una etiqueta
rpc GetTag(GetTagRequest) returns (stream GetTagResponse);

//Manda a eliminar una carpeta de etiquetas determinada
rpc DeleteTag(DeleteTagRequest) returns (DeleteTagResponse);
  
// Recupera la infomrmacion de un archivo
rpc GetFile(GetFileInfoRequest) returns (GetFileInfoResponse);

// Edita la referencia a un archivo guardado por una etiqueta
rpc EditFileFromTag(EditFileFromTagRequest) returns (EditFileFromTagResponse);
}